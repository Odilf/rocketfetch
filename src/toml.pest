toml = _{ SOI ~ value ~ EOI }

value = _{ (top_level_configuration | format_header | user_header | delimiter_header | os_header | host_header | kernel_header | uptime_header| packages_header | custom_header ~ !(ANY* ~ opening_bracket ~ PEEK_ALL ~ closing_bracket ~ ANY*))* }

multi_line_string = { triple_quote ~ inner ~ triple_quote }
string = { quote ~ inner ~ quote }
multi_line_literal = { triple_single_quote ~ (!triple_single_quote ~ ANY)* ~ triple_single_quote }
literal = { single_quote ~ (!single_quote ~ ANY)* ~ single_quote }
string_value = { (string | multi_line_string | literal | multi_line_literal) }

unsigned_integer = @{ ("0" | ASCII_NONZERO_DIGIT ~ (ASCII_DIGIT)*) }

inner = @{ (!(quote | backslash | "\u{0000}" | "\u{001F}") ~ ANY)* ~ (escape ~ inner)? }
escape  = @{ backslash ~ ("b" | "t" | "n" | "f" | "r" | quote | backslash | unicode | NEWLINE)? }
unicode = @{ "u" ~ ASCII_HEX_DIGIT{4} | "U" ~ ASCII_HEX_DIGIT{8} }

char_value = @{ (single_quote | quote) ~ ANY ~ (single_quote | quote)}

WHITESPACE = _{ space | tab | NEWLINE }
COMMENT    = _{ hashtag ~ (!NEWLINE ~ ANY)* }

quote = @{ "\"" }
triple_quote = @{ quote ~ quote ~ quote }
single_quote = @{ "'" }
triple_single_quote = @{ single_quote ~ single_quote ~ single_quote }
space = @{ " " }
tab = @{ "\t" }
hashtag = @{ "#" }
backslash = @{ "\\" }
equal_sign = @{ "=" }
opening_bracket = @{ "[" }
closing_bracket = @{ "]" }
dot = { "." }
dash = { "-" }

// Header Names
format = { "format" }
user = { "user" }
delimiter = { "delimiter" }
os = { "os" }
host = { "host" }
kernel = { "kernel" }
uptime = { "uptime" }

// General

pre_text_style = { "pre_text_style" ~ equal_sign ~ string_value }
pre_text = { "pre_text" ~ equal_sign ~ string_value }
output_style = { "output_style" ~ equal_sign ~ string_value }

// Top level Configuration

top_level_configuration = _{ (module_order | offset | logo_cmd) }
module_order = { "module_order" ~ equal_sign ~ string_value }
offset = { "offset" ~ equal_sign ~ unsigned_integer }
logo_cmd = { "logo_cmd" ~ equal_sign ~ string_value }

// Format Header

format_header = _{ opening_bracket ~ format ~ closing_bracket ~ (mode | top_left_corner_char | top_right_corner_char | bottom_left_corner_char | bottom_right_corner_char | horizontal_char | vertical_char | padding_left | padding_right | padding_top)* }
mode = _{ "mode" ~ equal_sign ~ (classic | bottom_block | side_block) }
top_left_corner_char = _{ "top_left_corner_char" ~ equal_sign ~ char_value }
top_right_corner_char = _{ "top_right_corner_char" ~ equal_sign ~ char_value }
bottom_left_corner_char = _{ "bottom_left_corner_char" ~ equal_sign ~ char_value }
bottom_right_corner_char = _{ "bottom_right_corner_char" ~ equal_sign ~ char_value }
horizontal_char = _{ "horizontal_char" ~ equal_sign ~ char_value }
vertical_char = _{ "vertical_char" ~ equal_sign ~ char_value }
padding_left = _{ "padding_left" ~ equal_sign ~ unsigned_integer }
padding_right = _{ "padding_right" ~ equal_sign ~ unsigned_integer }
padding_top = _{ "padding_top" ~ equal_sign ~ unsigned_integer}

// Mode Names

classic = _{ (classic_quote | classic_single_quote | classic_triple_quote | classic_triple_single_quote) }
classic_single_quote = _{ single_quote ~ "classic" ~ single_quote }
classic_quote = _{ quote ~ "classic" ~ quote }
classic_triple_quote = _{ triple_quote ~ "classic" ~ triple_quote }
classic_triple_single_quote = _{ triple_single_quote ~ "classic" ~ triple_single_quote }

bottom_block = @{ (bottom_block_quote | bottom_block_single_quote | bottom_block_triple_quote | bottom_block_triple_single_quote) }
bottom_block_string = _{ ("bottom_block" | "bottomblock") }
bottom_block_single_quote = _{ single_quote ~ bottom_block_string ~ single_quote}
bottom_block_quote = _{ quote ~ bottom_block_string ~ quote}
bottom_block_triple_quote = _{ triple_quote ~ bottom_block_string ~ triple_quote }
bottom_block_triple_single_quote = _{ triple_single_quote ~ bottom_block_string ~ triple_quote }

side_block = @{ (side_block_quote | side_block_single_quote | side_block_triple_quote | side_block_triple_single_quote) }
side_block_string = _{ ("side_block" | "sideblock") }
side_block_single_quote = _{ single_quote ~ side_block_string ~ single_quote}
side_block_quote = _{ quote ~ side_block_string ~ quote}
side_block_triple_quote = _{ triple_quote ~ side_block_string ~ triple_quote }
side_block_triple_single_quote = _{ triple_single_quote ~ side_block_string ~ triple_quote }

// User Header

user_header = _{ opening_bracket ~ user ~ closing_bracket ~ (pre_text_style | pre_text | output_style | separator_style | separator_char)* }
separator_style = _{ "separator_style" ~ equal_sign ~ string_value }
separator_char = _{ "separator_char" ~ equal_sign ~ char_value }

// Delimiter Header

delimiter_header = _{ opening_bracket ~ delimiter ~ closing_bracket ~ (style | repeat_num | char)* }
style = _{ "style" ~ equal_sign ~ string_value }
repeat_num = _{ "repeat_num" ~ equal_sign ~ unsigned_integer }
char = _{ "char" ~ equal_sign ~ char_value }

// OS Header

os_header = _{ opening_bracket ~ os ~ closing_bracket ~ (pre_text | pre_text_style | output_style)* }

// Host Header

host_header = _{ opening_bracket ~ host ~ closing_bracket ~ (pre_text | pre_text_style | output_style)* }

// Kernel Header

kernel_header = _{ opening_bracket ~ kernel ~ closing_bracket ~ (pre_text | pre_text_style | output_style)* }

// Uptime Header

uptime_header = _{ opening_bracket ~ uptime ~ closing_bracket ~ (pre_text | pre_text_style | output_style | time_format)* }
time_format = _{ "time_format" ~ equal_sign ~ string_value }

// Packages Header

packages_header = _{ opening_bracket ~ uptime ~ closing_bracket ~ (pre_text | pre_text_style | output_style)* }

// Custom Header
custom_header = _{ opening_bracket ~ (!opening_bracket ~ !closing_bracket ~ !format ~ !user ~ !delimiter ~ !os ~ !host ~ !kernel ~ !uptime ~ ANY)* ~ closing_bracket ~ (pre_text | pre_text_style | output_style | command)* }
command = _{ "command" ~ equal_sign ~ string_value }
